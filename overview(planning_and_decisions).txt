IT-150 Project

I. Program Flow:
	i)Game/project name and about.
	ii)Ask user his/her name.
	iii)Show user tournament groups.
	iv)User will be shown the participating team's data.
	loop {
	  v)User will be asked to make prediction for stage/stages.
	  vi)Run simulation for stage.
	  vii)Show results of the stage
	  viii)Update points.
	  ix)Show matchups for next stage
	}
	x)Show tournament winner 
	xi)username : points.

II. Program Structure/Basic API:

		main() {
			//Show project name, brief info and about
			//Create User
			//Create Tournament
			//Set Tournament
			//Tournament.makeGroups()
			//Tournament.start()
			//Display final user score
		}

	Assingned Classes -
		Abdullah: Team, Row, TournamentStage(Interface), Color
		Advaith: User, Knockouts, Tournament, Delay
		Dhruvil: Player, GroupStage, TextFile, Delay, Main
		Akheel: Manager, Match, Tournament

	i)Classes:  
	
		User -
			fields: - String name
				- String predictedTeam
				- int points
			methods: + User(String name)
				 + updatePoints()
				 - private setName(String name)
				 toString()
				 getters and setters
  
		Tournament -
			fields: - GroupStage group1
				- GroupStage group1
				- Knockouts k
				- ArrayList<Player> goalScorers
				- ArrayList<Team> allTeams
				- User user
				- int INCREMENT_IN_GROUP_STAGE = 5
				- int INCREMENT_IN_KNOCKOUTS = 10
			methods: + Tournament(String fileName, User u) //file containing teams, parses Text file
				 - ArrayList<Team> buildTeam(String filename)
				 - void makeGroups()
				 - void displayGroups()
				 - void displayQualifiedTeams()
				 - void checkUserPredictionWithQualifiedTeams(String userPrediction, String kStage)
				 - boolean validatePrediction(String userPrediction, GroupStage g)
				 - boolean validatePrediction(String userPrediction, Knockouts k)
				 - String userInputAndValidation(GroupStage g)
				 - String userInputAndValidation(Knockouts k)
				 + void start() {
					
					//take prediction
					//Simulate Group1
					//Update User points
					
					//take prediction
					//Simulate Group2
					//Update User point

					//Take prediction for knockout q
					//calls schedule and simulate of all stages and initializes the next stage
					//Update user score
					//Change Predictions for next Knockout stage?
					.
					.
					.
					}
				 + toString(), 
				 + getters and setters.  
				 
		Interface TournamentStage {
			+ void schedule()
			+ void simulate()
			+ ArrayList<Player> getGoalscorers()
		}  
		
		GrouStage implements TournamentStage - 			
			fields: - ArrayList<Team> playingsTeams
				- ArrayList<Match> mathces
				- ArrayList<Row> pointsTable
				- ArrayList<Player> goalScorers
				
			methods: + GroupStage(ArrayList<Team> teams) 
				 + void schedule()   			//fills matches ArrayList 
				 + void simulate()   			//runs all matches in matches, manipulates pointsTable, goals of players are updated
				 + void sortPointsTable()
				 + void sortScorers()
				 + String showPointsTable()
				 + String showGoalScorers()
				 + ArrayList<Team> getEliminatedTeam()
				 + ArrayList<Team> getQualifiedTeam()	
				 + String toString() 			//print groupstage schedule
				 + getters for remaining feilds
				 
		Knockouts implements TournamentStage - 
			fields: - ArrayList<Team> playingTeams
				- ArrayList<Match> matches
				- ArrayList<Player> goalScorers
				- ArrayList<Team> qualifiedTeams 
				- ArrayList<Team> eliminatedTeams 
			methods: + Knockouts(ArrayList<Team> playingTeams)
				 + void schedule() 			//similar to Group.schedule (brackets order must be maintained)
				 + void simulate()			//similar to Group.simulate() (no pointsTable to output, no match day)
				 + String toString()
				 + getters and setters  
				 
		Row -
			fields: - Team team
				- int points
				- int goalsScored
				- int goalsConceded
				- int wins
				- int losses
				//winning team +3 points
				//losing 0.
			methods: + Row(Team)
				 + void updateGoalsScored()
				 + void updateGoalsConceded()
				 + void addWin()
				 + void addWins()
				 + void addLoss()
				 + void addLosses()
				 + toString()
				 + getters and setters
				 
		Match -
			fields: - Team team1
				- Team team2
				- Team winner
				- Team loser
				- int goalsWinner
				- int goalsLoser
				- ArrayList<Player> winningTeamScorers
				- ArrayList<Player> losingTeamScorers
				- ArrayList<Integer> winningTeamPlayerGoals
				- ArrayList<Integer> losingTeamPlayerGoals
			methods: + Match(team1, team2)
				 - void determineGoalScorers()
				 + void play()
				 + String toString()
				 + getters and setters.  
								//fields determining outcomes
								//1. int difference of teamRank (w=1)
								//2. double managerAbility (if teams are close w=1, else w=0.5)
								//3. int starPlayers (depends on manager ability)
								//4. double captainAbility (value added and subtracted -> 0.5)
								//5. int avgPlayerRatingDiff (value added and subtracted -> 0.25)
				 
		Team -
			fields: - String name
				- String fifaCode
				- Player Captain
				- Manager manager
				- int rank
				- int starPlayers
				- ArrayList<Player> players
			methods: +Team(All fields)
				 + double getAvgRating()
				 + toString()
				 + getters 
				 
		Player -	
			fields: - String name
				- String position
				- double playerRating
				- double shootingAbility
				- int goals
				- int jerseyNumber
				- Team team 
			methods: + Player(String name.String pos,int jerseyNo,double playerRating,double shootingAbility)
				 + void addGoal()
				 + String toString() 
				 + getters and setters  
				 
		Manager -
			fields: - String name
				- double ability
			methods: + public Manager(fields...)
				 + public String toString()
				 + getters and setters  
  
  


Group.simulate() output structure for reference:  

					{
					  
					  Match day #1
					  toString() of Match Object {
					  team x vs team y
					}
					  delay
					  team x won
					  delay
					  next match
					  .
					  .
					  . 
					  2 times
					  
					  print pointsTable 
					  delay

					  Match day #2
					  .
					  .
					  print pointsTable
					  .
					  .
					  Match day #5
					}
