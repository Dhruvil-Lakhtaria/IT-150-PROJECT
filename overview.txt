   Tournament Simulator
Goal: To simulate a football league amongst top nation by scheduling match fixture and simulating the tournament 

Project is made more user-interactive and gamified by adding the feature of user to predict….

Java File/Classes: - 
Rough Overview (Subject to change) – 
Team – datatype representing each team
Player – datatype representing each player 
Scheduling part – contain static methods to schedule league fixtures and knockout fixtures
Tournament – class containing main method and representing whole tournament and the main application.
User  – A class keeping record of state of each user who is predicting (users prediction and points).
Input data – through text file 



FLOW OF APPLICATION –
First display teams and scheduled fixture 
User Prediction for group stage
Group stage fixture simulation 





Then after league stage schedule the knockouts
User prediction 
Simulate knockouts


API –-

//
10/7/2021

IT-150 Project

I. Program Flow -
	i)Game/project name and about.
	ii)Ask user his/her name.
	iii)Show user tournament groups.
	iv)User will be shown the participating team's data.
	loop {
	  v)User will be asked to make prediction for stage/stages.
	  vi)Run simulation for stage.
	  vii)Show results of the stage
	  viii)Update points.
	  ix)Show matchups for next stage
	}
	x)Show tournament winner 
	xi)username : points.

II. Program Structure/Basic API
	
	i)Classes
		User-
			fields: name, points, prediction
			methods: getter and setter for the fields.

		Tournament-
			fields: Groups, Knockouts, Final(optional), Player[] goalScorers
				allTeams[],User
			methods: start(), makeGroups()
		
		
		Interface TournamentStage {
			schedule()
			simulate()
			getGoalscorers()
		}
		
		Group implements TournamentStage - 			
			fields: Team[5], Match[] matches, Row[5] pointsTable
			methods: schedule() 
					//creates Match objects and fills in matches array then prints the schedule
					//teams can't have consecutive matches
				 simulate() {
					  Match day #1
					  toString() of Match Object {
					  team x vs team y
					}
					  delay
					  team x won
					  delay
					  next match
					  .
					  .
					  . 
					  5 times
					  
					  print pointsTable 
					  delay
					  Match day #2
					  .
					  .
					  print pointsTable
					}
				qualifiedTeams() //returns top 4 teams.
		
		Knockouts implements TournamentStage - 
				fields: Team[] playingTeams, Match[] matches, Team[] qualified 
				methods: schedule() 
					//similar to Group.schedule, group Order must be maintained, teams can't have consecutive matches
					 simulate() { 
							//similar to Group.simulate() 
						    }
					qualifiedTeams() //returns qualified teams.
		
		Row 
				fields: Team, points, goals scored, goals conceded, wins, losses
				method: toString();
		
		Match
			fields: Team team1, team2, String stadium(to be decided later), Team winner, Team loser, goalsWinner, 
				goalsLoser, Player[] winningTeamScorers, Player[] losingTeamScorerScores  
			methods: play() {
					//fields determining outcomes
						1. int rank
						2. int starPlayers
						3. double captainAbility 
						4. double managerAbility
						5. int ratingDiff
				}

		Team 
			fields: Player[] players, String name, String fifaCode, Player Captain, Manager manager, double rank, int starPlayers,
				
				//fields determining outcomes
					1. double rank
					2. int starPlayers
					3. double captainAbility 
					4. double managerAbility  
					
			methods: toString()
		
		Player	
			fields: String name, String Club, int playerRating, boolean starPlayer, double shootingAbility, int goals, boolean isCaptain, Team team //stats 
			methods: toString()
		
		Manager 
			fields: String name, double ability, double experience //stats
			methods: toString()
