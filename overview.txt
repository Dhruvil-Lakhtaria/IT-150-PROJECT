IT-150 Project

I. Program Flow:
	i)Game/project name and about.
	ii)Ask user his/her name.
	iii)Show user tournament groups.
	iv)User will be shown the participating team's data.
	loop {
	  v)User will be asked to make prediction for stage/stages.
	  vi)Run simulation for stage.
	  vii)Show results of the stage
	  viii)Update points.
	  ix)Show matchups for next stage
	}
	x)Show tournament winner 
	xi)username : points.

II. Program Structure/Basic API:

		main() {
			//Show project name, brief info and about
			//Create User
			//Create Tournament
			//Set Tournament
			//Tournament.makeGroups()
			//Tournament.start()
			//Display final user score
		}

	Assingned Classes -
		Abdullah: Team, Row, TournamentStage(Interface), Color
		Advaith: User, Knockouts, Tournament, Delay
		Dhruvil: Player, GroupStage, TextFile, Delay, Main
		Akheel: Manager, Match, Tournament

	i)Classes:  
	
		User -
			fields: name, points, prediction
			methods: toString(),
				 getters and setters.  
  
		Tournament -
			fields: Group1, Group2, Knockout q, Knockout s, Knockout f, Player[] goalScorers, Team[] allTeams, User
			methods: Tournament(String fileName, User u) //file containing teams, parses Text file
				 start() {
					
					//take prediction
					//Simulate Group1
					//Update User points
					
					//take prediction
					//Simulate Group2
					//Update User point

					//Take prediction for knockout q
					//calls schedule and simulate of all stages and initializes the next stage
					//Update user score
					//Change Predictions for next Knockout stage?
					.
					.
					.
					
					
				},
				 toString(), 
				 makeGroups(),
				 getters and setters.  
				 
		Interface TournamentStage {
			+ void schedule()
			+ void simulate()
			+ ArrayList<Player> getGoalscorers()
		}  
		
		GrouStage implements TournamentStage - 			
			fields: - ArrayList<Team>playingsTeams
				- ArrayList<Match>mathces
				- ArrayList<Row>pointsTable
				- ArrayList<Player>goalScorers
				
			methods: + GroupStage(ArrayList<Team>teams) 
				 + void schedule()   //fills matches ArrayList 
				 + void simulate()   //runs all matches in matches, manipulates pointsTable, goals of players are updated
				 + void sortPointsTable()
				 + void sortScorers()
				 + String showPointsTable()
				 + String showGoalScorers()
				 + ArrayList<Player> getGoalScorers()
				 + ArrayList<Team> getQualifiedTeams()	
				 + String toString() //print groupstage schedule
				 + getter for remaining fields
				 
		Knockouts implements TournamentStage - 
			fields: Team[] playingTeams, Match[] matches, Team[] qualified 
			methods: Knockouts(Team[])
				 schedule(), 			//similar to Group.schedule (brackets order must be maintained)
				 simulate(),			//similar to Group.simulate() (no pointsTable to output, no match day)
				 qualifiedTeams(), 		//returns qualified teams.  
				 
		Row -
			fields: Team, points, goalsScored, goalsConceded, wins, losses
				//winning team +3 points
				//losing 0.
			methods: + Row(Team)
				 + getters and setters
				 + void updateGoalsScored()
				 + void updateGoalsConceded()
				 + void addWin()
				 + void addWins()
				 + void addLoss()
				 + void addLosses()
				 + toString(). 
				 
		Match -
			fields: - Team team1, team2, winner, loser
				- int goalsWinner, goalsLoser
				- ArrayList<Player> winningTeamScorers, losingTeamScorers
				- ArrayList<Integer> winningTeamPlayerGoals, losingTeamPlayerGoals
			methods: + Match(team1, team2)
				 + void play()
				 - void determineGoalScorers()
				 + String toString()
				 + getters and setters.  
								//fields determining outcomes
								//1. int difference of teamRank (w=1)
								//2. double managerAbility (if teams are close w=1, else w=0.5)
								//3. int starPlayers (depends on manager ability)
								//4. double captainAbility (value added and subtracted -> 0.5)
								//5. int avgPlayerRatingDiff (value added and subtracted -> 0.25)
				 
		Team -
			fields: Player[] players, String name, String fifaCode, Player Captain, Manager manager, int rank, int starPlayers	
			methods: +Team(All fields)
				 + double getAvgRating()
				 + toString()
				 + getters 
				 
		Player -	
			fields: - String name,position
				- double playerRating,shootingAbility
				- int goals,jerseyNumber
				- Team team 
				
			methods: + Player(String name.String pos,int jerseyNo,double playerRating,double shootingAbility)
				 + void setTeam(Team t)
				 + void addGoals()
				 + String toString() 
				 getters and setters for remaining fields....  
				 
		Manager -
			fields: - String name
				- double ability
			methods: + public Manager(fields...)
				 + public String toString()
				 + getters and setters  
  
  


Group.simulate() output structure for reference:  

					{
					  
					  Match day #1
					  toString() of Match Object {
					  team x vs team y
					}
					  delay
					  team x won
					  delay
					  next match
					  .
					  .
					  . 
					  2 times
					  
					  print pointsTable 
					  delay

					  Match day #2
					  .
					  .
					  print pointsTable
					  .
					  .
					  Match day #5
					}
